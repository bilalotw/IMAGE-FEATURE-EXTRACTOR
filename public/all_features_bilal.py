# -*- coding: utf-8 -*-
"""all features bilal

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JW28LRwgryN0TRfpojZVCt4LJlF_jlau
"""

import os
import csv
from PIL import Image
import numpy as np
from skimage import feature
from skimage.feature import greycomatrix, greycoprops


def extract_features(image_path):
    # Load image and convert to grayscale
    with Image.open(image_path) as img:
        gray = img.convert("L")
        gray_array = np.array(gray)

    # Compute statistical features
    mean = np.mean(gray)
    std_dev = np.std(gray)
    variance = np.var(gray)
    min_intensity = np.min(gray)
    max_intensity = np.max(gray)

    # Compute shape features using PIL.Image
    width, height = img.size
    aspect_ratio = width / height
    area = width * height
    bbox = img.getbbox()
    if bbox is None:
        perimeter = 0
    else:
        bbox_width = bbox[2] - bbox[0]
        bbox_height = bbox[3] - bbox[1]
        perimeter = 2 * (bbox_width + bbox_height)

    # Compute intensity features using scikit-image
    edges = feature.canny(gray_array)
    edge_density = np.sum(edges) / area

    # Compute texture features using scikit-image
    glcm = greycomatrix(gray_array, [5], [0], levels=256, symmetric=True, normed=True)
    contrast = greycoprops(glcm, "contrast")[0, 0]
    correlation = greycoprops(glcm, "correlation")[0, 0]
    energy = greycoprops(glcm, "energy")[0, 0]
    homogeneity = greycoprops(glcm, "homogeneity")[0, 0]

    # Compute spatial features using numpy
    x, y = np.meshgrid(np.arange(width), np.arange(height))
    x_center = np.mean(x[gray_array > 0])
    y_center = np.mean(y[gray_array > 0])
    x_std = np.std(x[gray_array > 0])
    y_std = np.std(y[gray_array > 0])
    x_range = np.max(x[gray_array > 0]) - np.min(x[gray_array > 0])
    y_range = np.max(y[gray_array > 0]) - np.min(y[gray_array > 0])

    # Return features as a list
    features = [mean, std_dev, variance, min_intensity, max_intensity, aspect_ratio, area, perimeter, edge_density, contrast, correlation, energy, homogeneity, x_center, y_center, x_std, y_std, x_range, y_range]
    return features


def main():
    # Directory containing images
    image_dir = "/content/images"

    # List of image files
    image_files = [os.path.join(image_dir, f) for f in os.listdir(image_dir) if f.endswith((".jpg", ".jpeg", ".png", ".bmp", ".tiff", ".tif"))]

    # Open CSV file for writing
    with open("image_features.csv", mode="w") as csv_file:
        # Create CSV writer
        writer = csv.writer(csv_file)

        # Write header row
        writer.writerow(["filename", "mean", "std_dev", "variance", "min_intensity", "max_intensity", "aspect_ratio", "area", "perimeter", "edge_density", "contrast", "correlation", "energy", "homogeneity", "x_center", "y_center", "x_std", "y_std", "x_range", "y_range"])

        # Iterate over image files and extract features
        for image_file in image_files:
            # Extract features
            features = extract_features(image_file)

            # Get image filename
            filename = os.path.basename(image_file)

            # Write feature values to CSV file
            writer.writerow([filename] + features)


if __name__ == "__main__":
    main()